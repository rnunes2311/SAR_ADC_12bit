
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 16.0.6 -fPIC -Os)

Loaded SDC plugin
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /Users/ricardonunes/.volare/volare/sky130/versions/bdc9412b3e468c102d01b7cf6337be06ec6e9c9a/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v
Parsing SystemVerilog input from `/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v' to AST representation.
Generating RTLIL representation for module `\state_machine'.
Generating RTLIL representation for module `\timing_feedback'.
Successfully finished Verilog frontend.

3. Generating Graphviz representation of design.
Writing dot description to `/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/runs/RUN_2024-04-07_18-29-36/06-yosys-synthesis/hierarchy.dot'.
Dumping module state_machine to page 1.

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \state_machine

4.2. Analyzing design hierarchy..
Top module:  \state_machine
Removing unused module `\timing_feedback'.
Removed 1 unused modules.
Renaming module state_machine to state_machine.

5. Executing TRIBUF pass.

6. Executing HIERARCHY pass (managing design hierarchy).

6.1. Analyzing design hierarchy..
Top module:  \state_machine

6.2. Analyzing design hierarchy..
Top module:  \state_machine
Removed 0 unused modules.

7. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:128$75 in module state_machine.
Marked 1 switch rules as full_case in process $proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:128$75 in module state_machine.
Marked 4 switch rules as full_case in process $proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:93$21 in module state_machine.
Marked 2 switch rules as full_case in process $proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:75$9 in module state_machine.
Marked 2 switch rules as full_case in process $proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:61$5 in module state_machine.
Marked 5 switch rules as full_case in process $proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:32$2 in module state_machine.
Removed a total of 1 dead cases.

9. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 2 assignments to connections.

10. Executing PROC_INIT pass (extract init attributes).

11. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst_z in `\state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:93$21'.
Found VHDL-style edge-trigger \clk in `\state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:93$21'.
Found async reset \rst_z in `\state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:75$9'.
Found async reset \rst_z in `\state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:61$5'.
Found async reset \rst_z in `\state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:32$2'.

12. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~10 debug messages>

13. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:128$75'.
     1/1: $1\debug_out[0:0]
Creating decoders for process `\state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:93$21'.
     1/16: $4\i[31:0]
     2/16: $0\result[11:0] [11]
     3/16: $0\result[11:0] [10]
     4/16: $0\result[11:0] [9]
     5/16: $0\result[11:0] [8]
     6/16: $0\result[11:0] [7]
     7/16: $0\result[11:0] [6]
     8/16: $0\result[11:0] [5]
     9/16: $0\result[11:0] [4]
    10/16: $0\result[11:0] [3]
    11/16: $0\result[11:0] [2]
    12/16: $0\result[11:0] [1]
    13/16: $0\result[11:0] [0]
    14/16: $2\i[31:0]
    15/16: $1\i[31:0]
    16/16: $3\i[31:0]
Creating decoders for process `\state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:75$9'.
     1/2: $0\counter[11:0] [11]
     2/2: $0\counter[11:0] [10:0]
Creating decoders for process `\state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:61$5'.
     1/1: $0\counter_sample[0:0]
Creating decoders for process `\state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:32$2'.
     1/1: $0\state[1:0]

14. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\state_machine.\debug_out' from process `\state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:128$75'.

15. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\state_machine.\result' using process `\state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:93$21'.
  created $adff cell `$procdff$212' with positive edge clock and negative level reset.
Creating register for signal `\state_machine.\i' using process `\state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:93$21'.
  created $dff cell `$procdff$215' with positive edge clock.
Creating register for signal `\state_machine.\counter' using process `\state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:75$9'.
  created $adff cell `$procdff$216' with positive edge clock and negative level reset.
Creating register for signal `\state_machine.\counter_sample' using process `\state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:61$5'.
  created $adff cell `$procdff$217' with positive edge clock and negative level reset.
Creating register for signal `\state_machine.\state' using process `\state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:32$2'.
  created $adff cell `$procdff$218' with positive edge clock and negative level reset.

16. Executing PROC_MEMWR pass (convert process memory writes to cells).

17. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:128$75'.
Removing empty process `state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:128$75'.
Found and cleaned up 2 empty switches in `\state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:93$21'.
Removing empty process `state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:93$21'.
Found and cleaned up 2 empty switches in `\state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:75$9'.
Removing empty process `state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:75$9'.
Found and cleaned up 1 empty switch in `\state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:61$5'.
Removing empty process `state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:61$5'.
Found and cleaned up 4 empty switches in `\state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:32$2'.
Removing empty process `state_machine.$proc$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:32$2'.
Cleaned up 10 empty switches.

18. Executing CHECK pass (checking for obvious problems).
Checking module state_machine...
Found and reported 0 problems.

19. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.
<suppressed ~7 debug messages>

20. Executing FLATTEN pass (flatten design).

21. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..
Removed 9 unused cells and 86 unused wires.
<suppressed ~12 debug messages>

23. Executing OPT pass (performing simple optimizations).

23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
<suppressed ~57 debug messages>
Removed a total of 19 cells.

23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \state_machine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \state_machine.
Performed a total of 0 changes.

23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

23.6. Executing OPT_DFF pass (perform DFF optimizations).

23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..
Removed 0 unused cells and 19 unused wires.
<suppressed ~1 debug messages>

23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

23.9. Rerunning OPT passes. (Maybe there is more to do..)

23.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \state_machine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

23.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \state_machine.
Performed a total of 0 changes.

23.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

23.13. Executing OPT_DFF pass (perform DFF optimizations).

23.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..

23.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

23.16. Finished OPT passes. (There is nothing left to do.)

24. Executing FSM pass (extract and optimize FSM).

24.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking state_machine.state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Circuit seems to be self-resetting.

24.2. Executing FSM_EXTRACT pass (extracting FSM from design).

24.3. Executing FSM_OPT pass (simple optimizations of FSMs).

24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..

24.5. Executing FSM_OPT pass (simple optimizations of FSMs).

24.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

24.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

24.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

25. Executing OPT pass (performing simple optimizations).

25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \state_machine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \state_machine.
Performed a total of 0 changes.

25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

25.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$216 ($adff) from module state_machine (D = $0\counter[11:0], Q = \counter).
Adding EN signal on $procdff$212 ($adff) from module state_machine (D = $0\result[11:0] [0], Q = \result [0]).
Adding EN signal on $procdff$212 ($adff) from module state_machine (D = $0\result[11:0] [1], Q = \result [1]).
Adding EN signal on $procdff$212 ($adff) from module state_machine (D = $0\result[11:0] [2], Q = \result [2]).
Adding EN signal on $procdff$212 ($adff) from module state_machine (D = $0\result[11:0] [3], Q = \result [3]).
Adding EN signal on $procdff$212 ($adff) from module state_machine (D = $0\result[11:0] [4], Q = \result [4]).
Adding EN signal on $procdff$212 ($adff) from module state_machine (D = $0\result[11:0] [5], Q = \result [5]).
Adding EN signal on $procdff$212 ($adff) from module state_machine (D = $0\result[11:0] [6], Q = \result [6]).
Adding EN signal on $procdff$212 ($adff) from module state_machine (D = $0\result[11:0] [7], Q = \result [7]).
Adding EN signal on $procdff$212 ($adff) from module state_machine (D = $0\result[11:0] [8], Q = \result [8]).
Adding EN signal on $procdff$212 ($adff) from module state_machine (D = $0\result[11:0] [9], Q = \result [9]).
Adding EN signal on $procdff$212 ($adff) from module state_machine (D = $0\result[11:0] [10], Q = \result [10]).
Adding EN signal on $procdff$212 ($adff) from module state_machine (D = $0\result[11:0] [11], Q = \result [11]).

25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..

25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.
<suppressed ~13 debug messages>

25.9. Rerunning OPT passes. (Maybe there is more to do..)

25.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \state_machine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

25.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \state_machine.
Performed a total of 0 changes.

25.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
<suppressed ~33 debug messages>
Removed a total of 11 cells.

25.13. Executing OPT_DFF pass (perform DFF optimizations).

25.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..
Removed 0 unused cells and 11 unused wires.
<suppressed ~1 debug messages>

25.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

25.16. Rerunning OPT passes. (Maybe there is more to do..)

25.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \state_machine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

25.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \state_machine.
Performed a total of 0 changes.

25.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

25.20. Executing OPT_DFF pass (perform DFF optimizations).

25.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..

25.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

25.23. Finished OPT passes. (There is nothing left to do.)

26. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell state_machine.$ne$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:65$7 ($ne).
Removed top 1 bits (of 3) from port B of cell state_machine.$auto$opt_dff.cc:195:make_patterns_logic$231 ($ne).
Removed top 20 bits (of 32) from port A of cell state_machine.$not$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:90$17 ($not).
Removed top 20 bits (of 32) from port A of cell state_machine.$add$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:90$19 ($add).
Removed top 21 bits (of 32) from port B of cell state_machine.$add$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:90$19 ($add).
Removed top 19 bits (of 32) from port Y of cell state_machine.$add$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:90$19 ($add).
Removed top 19 bits (of 32) from port B of cell state_machine.$and$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:90$20 ($and).
Removed top 20 bits (of 32) from port Y of cell state_machine.$and$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:90$20 ($and).
Removed top 20 bits (of 32) from port A of cell state_machine.$and$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:90$20 ($and).
Removed top 1 bits (of 13) from port B of cell state_machine.$and$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:90$20 ($and).
Removed top 1 bits (of 3) from port B of cell state_machine.$auto$opt_dff.cc:195:make_patterns_logic$245 ($ne).
Removed top 1 bits (of 3) from port B of cell state_machine.$auto$opt_dff.cc:195:make_patterns_logic$224 ($ne).
Removed top 1 bits (of 2) from port B of cell state_machine.$eq$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:124$67 ($eq).
Removed top 1 bits (of 3) from port B of cell state_machine.$auto$opt_dff.cc:195:make_patterns_logic$252 ($ne).
Removed top 1 bits (of 4) from port B of cell state_machine.$procmux$96_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell state_machine.$procmux$97_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell state_machine.$procmux$98_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell state_machine.$procmux$99_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell state_machine.$procmux$100_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell state_machine.$procmux$101_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell state_machine.$procmux$102_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell state_machine.$auto$opt_dff.cc:195:make_patterns_logic$301 ($ne).
Removed top 1 bits (of 3) from port B of cell state_machine.$auto$opt_dff.cc:195:make_patterns_logic$294 ($ne).
Removed top 1 bits (of 3) from port B of cell state_machine.$auto$opt_dff.cc:195:make_patterns_logic$287 ($ne).
Removed top 1 bits (of 3) from port B of cell state_machine.$auto$opt_dff.cc:195:make_patterns_logic$280 ($ne).
Removed top 1 bits (of 3) from port B of cell state_machine.$auto$opt_dff.cc:195:make_patterns_logic$273 ($ne).
Removed top 1 bits (of 3) from port B of cell state_machine.$auto$opt_dff.cc:195:make_patterns_logic$266 ($ne).
Removed top 1 bits (of 3) from port B of cell state_machine.$auto$opt_dff.cc:195:make_patterns_logic$259 ($ne).
Removed top 1 bits (of 2) from mux cell state_machine.$procmux$209 ($mux).
Removed top 1 bits (of 3) from port B of cell state_machine.$auto$opt_dff.cc:195:make_patterns_logic$238 ($ne).
Removed top 20 bits (of 32) from port Y of cell state_machine.$not$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:90$17 ($not).
Removed top 1 bits (of 13) from port Y of cell state_machine.$add$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:90$19 ($add).
Removed top 20 bits (of 32) from wire state_machine.$add$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:90$19_Y.
Removed top 20 bits (of 32) from wire state_machine.$not$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:90$17_Y.
Removed top 1 bits (of 2) from wire state_machine.$procmux$209_Y.

27. Executing PEEPOPT pass (run peephole optimizers).

28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

29. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module state_machine:
  creating $macc model for $add$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:90$19 ($add).
  creating $alu model for $macc $add$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:90$19.
  creating $alu cell for $add$/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/state_machine.v:90$19: $auto$alumacc.cc:485:replace_alu$309
  created 1 $alu and 0 $macc cells.

30. Executing SHARE pass (SAT-based resource sharing).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \state_machine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \state_machine.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

31.6. Executing OPT_DFF pass (perform DFF optimizations).

31.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..

31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

31.9. Finished OPT passes. (There is nothing left to do.)

32. Executing MEMORY pass.

32.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

32.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

32.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

32.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

32.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

32.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..

32.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

32.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

32.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..

32.10. Executing MEMORY_COLLECT pass (generating $mem cells).

33. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..

34. Executing OPT pass (performing simple optimizations).

34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.
<suppressed ~36 debug messages>

34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
<suppressed ~33 debug messages>
Removed a total of 11 cells.

34.3. Executing OPT_DFF pass (perform DFF optimizations).

34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..
Removed 1 unused cells and 33 unused wires.
<suppressed ~2 debug messages>

34.5. Finished fast OPT passes.

35. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

36. Executing OPT pass (performing simple optimizations).

36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.
<suppressed ~1 debug messages>

36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

36.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \state_machine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

36.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \state_machine.
    Consolidated identical input bits for $mux cell $procmux$200:
      Old ports: A=2'10, B=2'00, Y=$procmux$200_Y
      New ports: A=1'1, B=1'0, Y=$procmux$200_Y [1]
      New connections: $procmux$200_Y [0] = 1'0
  Optimizing cells in module \state_machine.
Performed a total of 1 changes.

36.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

36.6. Executing OPT_SHARE pass.

36.7. Executing OPT_DFF pass (perform DFF optimizations).

36.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..

36.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.
<suppressed ~1 debug messages>

36.10. Rerunning OPT passes. (Maybe there is more to do..)

36.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \state_machine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

36.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \state_machine.
Performed a total of 0 changes.

36.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

36.14. Executing OPT_SHARE pass.

36.15. Executing OPT_DFF pass (perform DFF optimizations).

36.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..

36.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

36.18. Finished OPT passes. (There is nothing left to do.)

37. Executing TECHMAP pass (map to technology primitives).

37.1. Executing Verilog-2005 frontend: /nix/store/6w7gra42rk8c62bjpbvsashgg4z4hm81-yosys-with-plugins/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/6w7gra42rk8c62bjpbvsashgg4z4hm81-yosys-with-plugins/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

37.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$556548cb7038fa09465db9fdc5b10cb4e4ea85e6\_90_pmux for cells of type $pmux.
Using template $paramod$97565c3687be688407d1272a293bd9d0ae6852dc\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $reduce_or.
No more expansions possible.
<suppressed ~232 debug messages>

38. Executing OPT pass (performing simple optimizations).

38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.
<suppressed ~133 debug messages>

38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
<suppressed ~237 debug messages>
Removed a total of 79 cells.

38.3. Executing OPT_DFF pass (perform DFF optimizations).

38.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..
Removed 1 unused cells and 194 unused wires.
<suppressed ~2 debug messages>

38.5. Finished fast OPT passes.

39. Executing ABC pass (technology mapping using ABC).

39.1. Extracting gate netlist of module `\state_machine' to `<abc-temp-dir>/input.blif'..
Extracted 328 gates and 380 wires to a netlist network with 51 inputs and 98 outputs.

39.1.1. Executing ABC.
Running ABC command: "/nix/store/4rrczjlbx21g7i2nsndckg7kr5jbfrlm-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

39.1.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       13
ABC RESULTS:               MUX cells:        7
ABC RESULTS:               AND cells:       17
ABC RESULTS:             ORNOT cells:       19
ABC RESULTS:               NOT cells:       37
ABC RESULTS:                OR cells:       52
ABC RESULTS:               NOR cells:        8
ABC RESULTS:            ANDNOT cells:      101
ABC RESULTS:        internal signals:      231
ABC RESULTS:           input signals:       51
ABC RESULTS:          output signals:       98
Removing temp directory.

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

40.3. Executing OPT_DFF pass (perform DFF optimizations).

40.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..
Removed 0 unused cells and 255 unused wires.
<suppressed ~4 debug messages>

40.5. Finished fast OPT passes.

41. Executing HIERARCHY pass (managing design hierarchy).

41.1. Analyzing design hierarchy..
Top module:  \state_machine

41.2. Analyzing design hierarchy..
Top module:  \state_machine
Removed 0 unused modules.

42. Printing statistics.

=== state_machine ===

   Number of wires:                202
   Number of wire bits:            316
   Number of public wires:          29
   Number of public wire bits:     120
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                281
     $_ANDNOT_                     101
     $_AND_                         17
     $_DFFE_PN0P_                   24
     $_DFF_PN0_                      3
     $_MUX_                          7
     $_NAND_                        13
     $_NOR_                          8
     $_NOT_                         37
     $_ORNOT_                       19
     $_OR_                          52

43. Executing CHECK pass (checking for obvious problems).
Checking module state_machine...
Found and reported 0 problems.

44. Generating Graphviz representation of design.
Writing dot description to `/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/runs/RUN_2024-04-07_18-29-36/06-yosys-synthesis/post_techmap.dot'.
Dumping module state_machine to page 1.

45. Executing SHARE pass (SAT-based resource sharing).

46. Executing OPT pass (performing simple optimizations).

46.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

46.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

46.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \state_machine..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

46.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \state_machine.
Performed a total of 0 changes.

46.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

46.6. Executing OPT_DFF pass (perform DFF optimizations).

46.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..

46.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

46.9. Finished OPT passes. (There is nothing left to do.)

47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..
{
   "creator": "Yosys 0.38 (git sha1 543faed9c8c, clang++ 16.0.6 -fPIC -Os)",
   "invocation": "stat -json -liberty /Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/runs/RUN_2024-04-07_18-29-36/tmp/55ccff4a01a347cbaf04f5f29f570700.lib ",
   "modules": {
      "\\state_machine": {
         "num_wires":         202,
         "num_wire_bits":     316,
         "num_pub_wires":     29,
         "num_pub_wire_bits": 120,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         281,
         "num_cells_by_type": {
            "$_ANDNOT_": 101,
            "$_AND_": 17,
            "$_DFFE_PN0P_": 24,
            "$_DFF_PN0_": 3,
            "$_MUX_": 7,
            "$_NAND_": 13,
            "$_NOR_": 8,
            "$_NOT_": 37,
            "$_ORNOT_": 19,
            "$_OR_": 52
         }
      }
   },
      "design": {
         "num_wires":         202,
         "num_wire_bits":     316,
         "num_pub_wires":     29,
         "num_pub_wire_bits": 120,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         281,
         "num_cells_by_type": {
            "$_ANDNOT_": 101,
            "$_AND_": 17,
            "$_DFFE_PN0P_": 24,
            "$_DFF_PN0_": 3,
            "$_MUX_": 7,
            "$_NAND_": 13,
            "$_NOR_": 8,
            "$_NOT_": 37,
            "$_ORNOT_": 19,
            "$_OR_": 52
         }
      }
}

48. Printing statistics.

=== state_machine ===

   Number of wires:                202
   Number of wire bits:            316
   Number of public wires:          29
   Number of public wire bits:     120
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                281
     $_ANDNOT_                     101
     $_AND_                         17
     $_DFFE_PN0P_                   24
     $_DFF_PN0_                      3
     $_MUX_                          7
     $_NAND_                        13
     $_NOR_                          8
     $_NOT_                         37
     $_ORNOT_                       19
     $_OR_                          52

   Area for cell type $_NOT_ is unknown!
   Area for cell type $_AND_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!
   Area for cell type $_MUX_ is unknown!
   Area for cell type $_DFF_PN0_ is unknown!
   Area for cell type $_DFFE_PN0P_ is unknown!

mapping tbuf
[INFO] Applying tri-state buffer mapping from '/Users/ricardonunes/.volare/volare/sky130/versions/bdc9412b3e468c102d01b7cf6337be06ec6e9c9a/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v'â¦

49. Executing TECHMAP pass (map to technology primitives).

49.1. Executing Verilog-2005 frontend: /Users/ricardonunes/.volare/volare/sky130/versions/bdc9412b3e468c102d01b7cf6337be06ec6e9c9a/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/Users/ricardonunes/.volare/volare/sky130/versions/bdc9412b3e468c102d01b7cf6337be06ec6e9c9a/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

49.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

50. Executing SIMPLEMAP pass (map simple cells to gate primitives).
[INFO] Applying latch mapping from '/Users/ricardonunes/.volare/volare/sky130/versions/bdc9412b3e468c102d01b7cf6337be06ec6e9c9a/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v'â¦

51. Executing TECHMAP pass (map to technology primitives).

51.1. Executing Verilog-2005 frontend: /Users/ricardonunes/.volare/volare/sky130/versions/bdc9412b3e468c102d01b7cf6337be06ec6e9c9a/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/Users/ricardonunes/.volare/volare/sky130/versions/bdc9412b3e468c102d01b7cf6337be06ec6e9c9a/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

51.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

52. Executing SIMPLEMAP pass (map simple cells to gate primitives).

53. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

53.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\state_machine':
  mapped 27 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
{
   "creator": "Yosys 0.38 (git sha1 543faed9c8c, clang++ 16.0.6 -fPIC -Os)",
   "invocation": "stat -json -liberty /Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/runs/RUN_2024-04-07_18-29-36/tmp/55ccff4a01a347cbaf04f5f29f570700.lib ",
   "modules": {
      "\\state_machine": {
         "num_wires":         226,
         "num_wire_bits":     340,
         "num_pub_wires":     29,
         "num_pub_wire_bits": 120,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         305,
         "area":              709.430400,
         "num_cells_by_type": {
            "$_ANDNOT_": 101,
            "$_AND_": 17,
            "$_MUX_": 31,
            "$_NAND_": 13,
            "$_NOR_": 8,
            "$_NOT_": 37,
            "$_ORNOT_": 19,
            "$_OR_": 52,
            "sky130_fd_sc_hd__dfrtp_2": 27
         }
      }
   },
      "design": {
         "num_wires":         226,
         "num_wire_bits":     340,
         "num_pub_wires":     29,
         "num_pub_wire_bits": 120,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         305,
         "area":              709.430400,
         "num_cells_by_type": {
            "$_ANDNOT_": 101,
            "$_AND_": 17,
            "$_MUX_": 31,
            "$_NAND_": 13,
            "$_NOR_": 8,
            "$_NOT_": 37,
            "$_ORNOT_": 19,
            "$_OR_": 52,
            "sky130_fd_sc_hd__dfrtp_2": 27
         }
      }
}

54. Printing statistics.

=== state_machine ===

   Number of wires:                226
   Number of wire bits:            340
   Number of public wires:          29
   Number of public wire bits:     120
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                305
     $_ANDNOT_                     101
     $_AND_                         17
     $_MUX_                         31
     $_NAND_                        13
     $_NOR_                          8
     $_NOT_                         37
     $_ORNOT_                       19
     $_OR_                          52
     sky130_fd_sc_hd__dfrtp_2       27

   Area for cell type $_NOT_ is unknown!
   Area for cell type $_AND_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!
   Area for cell type $_MUX_ is unknown!

   Chip area for module '\state_machine': 709.430400

[INFO] USING STRATEGY AREA 0

55. Executing ABC pass (technology mapping using ABC).

55.1. Extracting gate netlist of module `\state_machine' to `/tmp/yosys-abc-mrf7Xd/input.blif'..
Extracted 278 gates and 329 wires to a netlist network with 51 inputs and 96 outputs.

55.1.1. Executing ABC.
Running ABC command: "/nix/store/4rrczjlbx21g7i2nsndckg7kr5jbfrlm-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-mrf7Xd/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-mrf7Xd/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-mrf7Xd/input.blif 
ABC: + read_lib -w /Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/runs/RUN_2024-04-07_18-29-36/tmp/55ccff4a01a347cbaf04f5f29f570700.lib 
ABC: Parsing finished successfully.  Parsing time =     0.06 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/runs/RUN_2024-04-07_18-29-36/tmp/55ccff4a01a347cbaf04f5f29f570700.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.09 sec
ABC: Memory =    9.54 MB. Time =     0.09 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/runs/RUN_2024-04-07_18-29-36/06-yosys-synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2/Y".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/runs/RUN_2024-04-07_18-29-36/06-yosys-synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + 
ABC: + stime -p 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "none"  Gates =    156 ( 22.4 %)   Cap = 20.5 ff (  6.7 %)   Area =     1266.21 ( 64.7 %)   Delay =  1366.92 ps  (  3.2 %)               
ABC: Path  0 --       1 : 0    6 pi                        A =   0.00  Df =   0.0   -0.0 ps  S =   0.0 ps  Cin =  0.0 ff  Cout =  15.5 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     164 : 2   15 sky130_fd_sc_hd__nand2b_2 A =   8.76  Df = 232.6  -40.5 ps  S = 182.8 ps  Cin =  3.0 ff  Cout =  32.0 ff  Cmax = 285.7 ff  G = 1018  
ABC: Path  2 --     169 : 4    1 sky130_fd_sc_hd__or4_2    A =   8.76  Df = 869.6 -522.2 ps  S = 107.4 ps  Cin =  1.5 ff  Cout =   4.6 ff  Cmax = 310.4 ff  G =  292  
ABC: Path  3 --     170 : 4    1 sky130_fd_sc_hd__a211oi_2 A =  12.51  Df =1089.2 -688.6 ps  S = 138.1 ps  Cin =  4.4 ff  Cout =   2.4 ff  Cmax =  88.8 ff  G =   52  
ABC: Path  4 --     175 : 5    1 sky130_fd_sc_hd__o32a_2   A =  11.26  Df =1366.9  -47.5 ps  S = 180.9 ps  Cin =  2.3 ff  Cout =  33.4 ff  Cmax = 300.3 ff  G = 1451  
ABC: Start-point = pi0 (\state [0]).  End-point = po1 (\debug_out).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   51/   96  lat =    0  nd =   156  edge =    401  area =1266.23  delay = 4.00  lev = 4
ABC: + write_blif /tmp/yosys-abc-mrf7Xd/output.blif 

55.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       35
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:       20
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__mux2_1 cells:       16
ABC RESULTS:        internal signals:      182
ABC RESULTS:           input signals:       51
ABC RESULTS:          output signals:       96
Removing temp directory.

56. Executing SETUNDEF pass (replace undef values with defined constants).

57. Executing HILOMAP pass (mapping to constant drivers).
Warning: Selection "sky130_fd_sc_hd__conb_1" did not match any module.
Warning: Selection "LO" did not match any object.

58. Executing SPLITNETS pass (splitting up multi-bit signals).

59. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..
Removed 0 unused cells and 340 unused wires.
<suppressed ~1 debug messages>

60. Executing INSBUF pass (insert buffer cells for connected wires).

61. Executing CHECK pass (checking for obvious problems).
Checking module state_machine...
Found and reported 0 problems.
{
   "creator": "Yosys 0.38 (git sha1 543faed9c8c, clang++ 16.0.6 -fPIC -Os)",
   "invocation": "stat -json -liberty /Users/ricardonunes/Desktop/SAR_ADC_12b/SAR_ADC_12bit/state_machine/openlane/runs/RUN_2024-04-07_18-29-36/tmp/55ccff4a01a347cbaf04f5f29f570700.lib ",
   "modules": {
      "\\state_machine": {
         "num_wires":         139,
         "num_wire_bits":     207,
         "num_pub_wires":     52,
         "num_pub_wire_bits": 120,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         183,
         "area":              1975.644800,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a211o_2": 1,
            "sky130_fd_sc_hd__a211oi_2": 2,
            "sky130_fd_sc_hd__a21bo_2": 2,
            "sky130_fd_sc_hd__a21o_2": 3,
            "sky130_fd_sc_hd__a221o_2": 1,
            "sky130_fd_sc_hd__a22o_2": 10,
            "sky130_fd_sc_hd__a2bb2o_2": 1,
            "sky130_fd_sc_hd__a31o_2": 3,
            "sky130_fd_sc_hd__and2_2": 13,
            "sky130_fd_sc_hd__and2b_2": 3,
            "sky130_fd_sc_hd__and3_2": 1,
            "sky130_fd_sc_hd__and3b_2": 1,
            "sky130_fd_sc_hd__and4_2": 3,
            "sky130_fd_sc_hd__dfrtp_2": 27,
            "sky130_fd_sc_hd__inv_2": 35,
            "sky130_fd_sc_hd__mux2_1": 16,
            "sky130_fd_sc_hd__mux4_2": 2,
            "sky130_fd_sc_hd__nand2_2": 2,
            "sky130_fd_sc_hd__nand2b_2": 2,
            "sky130_fd_sc_hd__nand3b_2": 9,
            "sky130_fd_sc_hd__nor2_2": 14,
            "sky130_fd_sc_hd__nor3_2": 1,
            "sky130_fd_sc_hd__o21ai_2": 1,
            "sky130_fd_sc_hd__o311a_2": 1,
            "sky130_fd_sc_hd__o31a_2": 2,
            "sky130_fd_sc_hd__o32a_2": 1,
            "sky130_fd_sc_hd__or3_2": 3,
            "sky130_fd_sc_hd__or3b_2": 20,
            "sky130_fd_sc_hd__or4_2": 2,
            "sky130_fd_sc_hd__or4bb_2": 1
         }
      }
   },
      "design": {
         "num_wires":         139,
         "num_wire_bits":     207,
         "num_pub_wires":     52,
         "num_pub_wire_bits": 120,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         183,
         "area":              1975.644800,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a211o_2": 1,
            "sky130_fd_sc_hd__a211oi_2": 2,
            "sky130_fd_sc_hd__a21bo_2": 2,
            "sky130_fd_sc_hd__a21o_2": 3,
            "sky130_fd_sc_hd__a221o_2": 1,
            "sky130_fd_sc_hd__a22o_2": 10,
            "sky130_fd_sc_hd__a2bb2o_2": 1,
            "sky130_fd_sc_hd__a31o_2": 3,
            "sky130_fd_sc_hd__and2_2": 13,
            "sky130_fd_sc_hd__and2b_2": 3,
            "sky130_fd_sc_hd__and3_2": 1,
            "sky130_fd_sc_hd__and3b_2": 1,
            "sky130_fd_sc_hd__and4_2": 3,
            "sky130_fd_sc_hd__dfrtp_2": 27,
            "sky130_fd_sc_hd__inv_2": 35,
            "sky130_fd_sc_hd__mux2_1": 16,
            "sky130_fd_sc_hd__mux4_2": 2,
            "sky130_fd_sc_hd__nand2_2": 2,
            "sky130_fd_sc_hd__nand2b_2": 2,
            "sky130_fd_sc_hd__nand3b_2": 9,
            "sky130_fd_sc_hd__nor2_2": 14,
            "sky130_fd_sc_hd__nor3_2": 1,
            "sky130_fd_sc_hd__o21ai_2": 1,
            "sky130_fd_sc_hd__o311a_2": 1,
            "sky130_fd_sc_hd__o31a_2": 2,
            "sky130_fd_sc_hd__o32a_2": 1,
            "sky130_fd_sc_hd__or3_2": 3,
            "sky130_fd_sc_hd__or3b_2": 20,
            "sky130_fd_sc_hd__or4_2": 2,
            "sky130_fd_sc_hd__or4bb_2": 1
         }
      }
}

62. Printing statistics.

=== state_machine ===

   Number of wires:                139
   Number of wire bits:            207
   Number of public wires:          52
   Number of public wire bits:     120
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                183
     sky130_fd_sc_hd__a211o_2        1
     sky130_fd_sc_hd__a211oi_2       2
     sky130_fd_sc_hd__a21bo_2        2
     sky130_fd_sc_hd__a21o_2         3
     sky130_fd_sc_hd__a221o_2        1
     sky130_fd_sc_hd__a22o_2        10
     sky130_fd_sc_hd__a2bb2o_2       1
     sky130_fd_sc_hd__a31o_2         3
     sky130_fd_sc_hd__and2_2        13
     sky130_fd_sc_hd__and2b_2        3
     sky130_fd_sc_hd__and3_2         1
     sky130_fd_sc_hd__and3b_2        1
     sky130_fd_sc_hd__and4_2         3
     sky130_fd_sc_hd__dfrtp_2       27
     sky130_fd_sc_hd__inv_2         35
     sky130_fd_sc_hd__mux2_1        16
     sky130_fd_sc_hd__mux4_2         2
     sky130_fd_sc_hd__nand2_2        2
     sky130_fd_sc_hd__nand2b_2       2
     sky130_fd_sc_hd__nand3b_2       9
     sky130_fd_sc_hd__nor2_2        14
     sky130_fd_sc_hd__nor3_2         1
     sky130_fd_sc_hd__o21ai_2        1
     sky130_fd_sc_hd__o311a_2        1
     sky130_fd_sc_hd__o31a_2         2
     sky130_fd_sc_hd__o32a_2         1
     sky130_fd_sc_hd__or3_2          3
     sky130_fd_sc_hd__or3b_2        20
     sky130_fd_sc_hd__or4_2          2
     sky130_fd_sc_hd__or4bb_2        1

   Chip area for module '\state_machine': 1975.644800

63. Executing Verilog backend.
Dumping module `\state_machine'.

64. Executing JSON backend.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 8fab4c9691, CPU: user 1.17s system 0.09s
Yosys 0.38 (git sha1 543faed9c8c, clang++ 16.0.6 -fPIC -Os)
Time spent: 30% 2x abc (0 sec), 29% 7x stat (0 sec), ...
